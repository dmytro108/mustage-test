name: Continuous Integration

on:
  pull_request:
    branches:
    - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/test

jobs:
  build_scan_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v6

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build image
      run: |
        docker build -t "${{ env.IMAGE_NAME }}:pr-${{ steps.branch-name.outputs.current_branch }}" .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:pr-${{ steps.branch-name.outputs.current_branch }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Log in to Docker Hub
      if: success()
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push image to registry
      if: success()
      run: |
        docker push ${{ env.IMAGE_NAME }}:pr-${{ steps.branch-name.outputs.current_branch }}

    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.5.0

    - name: Install Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

        # Wait for Ingress Controller to be fully ready
        echo "=== Waiting for Ingress Controller to be ready ==="
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=120s

        # Wait for admission webhook to be available
        echo "=== Waiting for Ingress admission webhook ==="
        kubectl wait --namespace ingress-nginx \
          --for=condition=available deployment/ingress-nginx-controller \
          --timeout=120s

        # Additional wait for webhook service to be fully ready
        echo "=== Additional wait for webhook service stability ==="
        sleep 20

    - name: Deploy to k8s
      run: |
        # Fix image reference
        sed -i "s|image: YOUR_DOCKER_REGISTRY/test:latest|image: ${{ env.IMAGE_NAME }}:pr-${{ steps.branch-name.outputs.current_branch }}|g" k8s/app.yml

        # Fix Redis password with proper base64 encoding
        REDIS_PASSWORD_B64=$(echo -n "${{ secrets.REDIS_PASSWORD }}" | base64 -w 0)
        sed -i "s/REDIS_PASSWORD: \"\"/REDIS_PASSWORD: $REDIS_PASSWORD_B64/g" k8s/secret.yml

        # Apply resources in order, excluding Ingress first
        echo "=== Applying resources ==="
        kubectl apply -f k8s/secret.yml
        kubectl apply -f k8s/redis.yml
        kubectl apply -f k8s/app.yml

        # Add diagnostic logging
        echo "=== Deployment Status ==="
        kubectl get pods -o wide
        kubectl get services
        kubectl get ingress

        echo "=== Waiting for pods to be ready ==="
        kubectl wait --for=condition=ready pod -l app=redis --timeout=60s
        kubectl wait --for=condition=ready pod -l app=nestjs-app --timeout=120s

    - name: Test API endpoint
      run: |
        echo "=== Checking Ingress status ==="
        kubectl describe ingress nestjs-app-ingress

        # Wait longer for Ingress to get an IP
        echo "Waiting for Ingress to be ready..."
        sleep 30

        INGRESS_IP=$(kubectl get ingress nestjs-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$INGRESS_IP" ]; then
          echo "Failed to get Ingress IP. Trying Node IP..."
          INGRESS_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi

        if [ -z "$INGRESS_IP" ]; then
          echo "Failed to get any IP. Checking pod logs..."
          echo "=== NestJS App Logs ==="
          kubectl logs -l app=nestjs-app --tail=50
          echo "=== Redis Logs ==="
          kubectl logs -l app=redis --tail=50
          exit 1
        fi

        echo "Testing Ingress at IP: $INGRESS_IP"

        # Test with more attempts and better error handling
        for i in {1..5}; do
          echo "=== Attempt $i ==="
          response=$(curl -sv "http://$INGRESS_IP/redis" 2>&1 || true)
          echo "Response: $response"
          
          if echo "$response" | grep -q '{"status":true}'; then
            echo "API test passed."
            exit 0
          fi
          
          if [ $i -lt 5 ]; then
            echo "Attempt $i failed. Checking pod status..."
            kubectl get pods -o wide
            echo "Retrying in 15 seconds..."
            sleep 15
          fi
        done

        echo "=== API test failed after 5 attempts. Collecting diagnostics ==="
        echo "=== Pod Status ==="
        kubectl get pods -o wide
        echo "=== NestJS App Logs ==="
        kubectl logs -l app=nestjs-app --tail=100
        echo "=== Redis Logs ==="
        kubectl logs -l app=redis --tail=50
        echo "=== Events ==="
        kubectl get events --sort-by=.metadata.creationTimestamp
        exit 1
