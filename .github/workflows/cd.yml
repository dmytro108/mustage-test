# ============================================
# CD Workflow: Tag source, build immutable image, and deploy to Kubernetes
# Trigger: manual (workflow_dispatch) with optional inputs
# Secrets used: DOCKER_USERNAME, DOCKER_PASSWORD, REDIS_PASSWORD
# Notes: Release tag format rel_v0.1.YYYYMMDDHHMM if not provided
# ============================================
name: Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (e.g., default)"
        required: false
        default: "default"
      rel_tag:
        description: "Optional custom release tag (e.g., rel_v0.1.202501010000). Leave empty to auto-generate."
        required: false
      image_name:
        description: "Override image name (default uses secrets.DOCKER_USERNAME/mustage-test)"
        required: false

permissions:
  contents: write

concurrency:
  group: cd-main
  cancel-in-progress: false

env:
  IMAGE_NAME: ${{ inputs.image_name != '' && inputs.image_name || format('{0}/mustage-test', secrets.DOCKER_USERNAME) }}

jobs:
  # CD Job 1: Build, tag, and push image to registry
  release:
    name: Build, Tag, and Push Image (GitHub runner)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      rel_tag: ${{ steps.version.outputs.rel_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Compute VERSION/REL_TAG (auto when not provided via inputs)
    - name: Derive release version
      id: version
      shell: bash
      run: |
        set -euo pipefail
        REL_INPUT="${{ inputs.rel_tag }}"
        if [ -n "$REL_INPUT" ]; then
          REL_TAG="$REL_INPUT"
          VERSION="${REL_INPUT#rel_}"
        else
          DATE=$(date -u +'%Y%m%d%H%M')
          VERSION="v0.1.$DATE"
          REL_TAG="rel_${VERSION}"
        fi
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "REL_TAG=$REL_TAG" >> "$GITHUB_ENV"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        echo "rel_tag=$REL_TAG" >> "$GITHUB_OUTPUT"

    # Create immutable Git tag to freeze versioned release
    - name: Create and push Git tag
      shell: bash
      run: |
        set -e
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag "${VERSION}"
        git push origin "${VERSION}"

    # Check out the code at the immutable release version
    - name: Checkout release tag
      shell: bash
      run: |
        git checkout "${VERSION}"

    # Enable Buildx for efficient/advanced Docker builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Authenticate to Docker registry for push
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build final image from release tag and push with release label
    - name: Build and push image
      shell: bash
      run: |
        docker build -t "${IMAGE_NAME}:${REL_TAG}" .
        docker push "${IMAGE_NAME}:${REL_TAG}"

  # CD Job 2: Deploy release to Kubernetes (self-hosted runner)
  deploy:
    name: Deploy to Kubernetes (on-prem, self-hosted)
    runs-on: self-hosted
    needs: release
    env:
      VERSION: ${{ needs.release.outputs.version }}
      REL_TAG: ${{ needs.release.outputs.rel_tag }}
    steps:
    # Ensure correct code version is deployed (matches built image)
    - name: Checkout release tag
      uses: actions/checkout@v3
      with:
        ref: ${{ env.VERSION }}
        fetch-depth: 0

    # Apply manifests, set image tag, and update Secrets with encoded Redis password
    - name: Deploy manifests
      shell: bash
      run: |
        set -euo pipefail
        echo "Using image ${IMAGE_NAME}:${REL_TAG}"
        sed -i "s|image: YOUR_DOCKER_REGISTRY/mustage-test:0.1.0|image: ${IMAGE_NAME}:${REL_TAG}|g" k8s/app.yml

        echo "Encoding Redis password and updating Secret manifest"
        REDIS_PASSWORD_B64=$(echo -n "${{ secrets.REDIS_PASSWORD }}" | base64 -w 0)
        sed -i "s/REDIS_PASSWORD: \"\"/REDIS_PASSWORD: $REDIS_PASSWORD_B64/g" k8s/secret.yml

        echo "Applying Kubernetes manifests"
        kubectl apply -f k8s/secret.yml
        kubectl apply -f k8s/redis.yml
        kubectl apply -f k8s/app.yml

        echo "Waiting for rollouts"
        kubectl rollout status deployment/redis --timeout=120s || true
        kubectl rollout status deployment/nestjs-app --timeout=180s

        echo "Cluster state summary"
        kubectl get pods -o wide
        kubectl get svc
        kubectl get ingress
